version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: relationhub-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: relationhub_dev
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: relationhub-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.dev
    container_name: relationhub-web
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - api
    command: pnpm --filter @relationhub/web dev

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    container_name: relationhub-api
    restart: unless-stopped
    ports:
      - '3001:3001'
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/relationhub_dev?schema=public
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: pnpm --filter @relationhub/api dev

volumes:
  postgres_data:
  redis_data:
