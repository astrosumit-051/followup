generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum EmailProvider {
  GMAIL
  OUTLOOK
  SMTP
}

enum ActivityType {
  EMAIL_SENT
  EMAIL_RECEIVED
  CALL
  MEETING
  NOTE
}

model User {
  id             String    @id @default(uuid())
  supabaseId     String    @unique
  email          String    @unique
  name           String?
  profilePicture String?
  provider       String?
  settings       Json?
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  contacts   Contact[]
  emails     Email[]
  activities Activity[]
  reminders  Reminder[]
  tags       Tag[]

  @@index([supabaseId])
  @@index([email])
  @@map("users")
}

model Contact {
  id              String    @id @default(uuid())
  userId          String
  name            String
  email           String?
  phone           String?
  linkedInUrl     String?
  company         String?
  industry        String?
  role            String?
  priority        Priority  @default(MEDIUM)
  gender          Gender?
  birthday        DateTime?
  profilePicture  String?
  notes           String?   @db.Text
  metadata        Json?
  lastContactedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails     Email[]
  activities Activity[]
  reminders  Reminder[]
  tags       ContactTag[]

  @@index([userId, priority])
  @@index([userId, lastContactedAt])
  @@map("contacts")
}

model Tag {
  id        String   @id @default(uuid())
  userId    String
  name      String
  color     String
  createdAt DateTime @default(now())

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts ContactTag[]

  @@unique([userId, name])
  @@index([userId])
  @@map("tags")
}

model ContactTag {
  contactId String
  tagId     String
  createdAt DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId])
  @@map("contact_tags")
}

model Email {
  id         String        @id @default(uuid())
  userId     String
  contactId  String
  subject    String
  body       String        @db.Text
  sentAt     DateTime      @default(now())
  openedAt   DateTime?
  clickedAt  DateTime?
  provider   EmailProvider
  metadata   Json?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([userId, sentAt])
  @@map("emails")
}

model Activity {
  id          String       @id @default(uuid())
  userId      String
  contactId   String
  type        ActivityType
  description String       @db.Text
  occurredAt  DateTime     @default(now())
  metadata    Json?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([userId, occurredAt])
  @@map("activities")
}

model Reminder {
  id          String    @id @default(uuid())
  userId      String
  contactId   String
  title       String
  dueDate     DateTime
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate, completed])
  @@map("reminders")
}
