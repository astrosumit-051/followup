generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum EmailProvider {
  GMAIL
  OUTLOOK
  SMTP
}

enum ActivityType {
  EMAIL_SENT
  EMAIL_RECEIVED
  CALL
  MEETING
  NOTE
}

enum EmailStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
  CANCELLED
}

enum TemplateType {
  FORMAL
  CASUAL
  CUSTOM
  AI_GENERATED
  TEMPLATE_BASED
}

enum Direction {
  SENT
  RECEIVED
}

model User {
  id             String    @id @default(uuid())
  supabaseId     String    @unique
  email          String    @unique
  name           String?
  profilePicture String?
  provider       String?
  settings       Json?
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  contacts            Contact[]
  emails              Email[]
  activities          Activity[]
  reminders           Reminder[]
  tags                Tag[]
  emailTemplates      EmailTemplate[]
  conversationHistory ConversationHistory[]

  @@index([supabaseId])
  @@index([email])
  @@map("users")
}

model Contact {
  id              String    @id @default(uuid())
  userId          String
  name            String
  email           String?
  phone           String?
  linkedInUrl     String?
  company         String?
  industry        String?
  role            String?
  priority        Priority  @default(MEDIUM)
  gender          Gender?
  birthday        DateTime?
  profilePicture  String?
  notes           String?   @db.Text
  metadata        Json?
  lastContactedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails              Email[]
  activities          Activity[]
  reminders           Reminder[]
  tags                ContactTag[]
  conversationHistory ConversationHistory[]

  // Performance indexes for frequently queried fields
  @@index([userId, createdAt(sort: Desc)]) // Default sort order (most common query)
  @@index([userId, priority]) // Filter by priority
  @@index([userId, lastContactedAt]) // Sort by last contact date
  @@index([userId, company]) // Filter/sort by company
  @@index([userId, industry]) // Filter/sort by industry
  @@index([userId, name]) // Sort by name alphabetically
  @@map("contacts")
}

model Tag {
  id        String   @id @default(uuid())
  userId    String
  name      String
  color     String
  createdAt DateTime @default(now())

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts ContactTag[]

  @@unique([userId, name])
  @@index([userId])
  @@map("tags")
}

model ContactTag {
  contactId String
  tagId     String
  createdAt DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId])
  @@map("contact_tags")
}

model Email {
  id           String        @id @default(uuid())
  userId       String
  contactId    String
  subject      String
  body         String        @db.Text
  bodyHtml     String?       @db.Text
  status       EmailStatus   @default(DRAFT)
  templateType TemplateType?
  providerId   String? // Which LLM model generated this (e.g., "openai/gpt-4-turbo")
  tokensUsed   Int?
  generatedAt  DateTime? // When AI generated the template
  sentAt       DateTime? // When email was actually sent (null for drafts)
  openedAt     DateTime? // Email tracking (Phase 4)
  repliedAt    DateTime? // Response received
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact             Contact               @relation(fields: [contactId], references: [id], onDelete: Cascade)
  conversationHistory ConversationHistory[]

  @@index([userId])
  @@index([contactId])
  @@index([status])
  @@index([sentAt])
  @@map("emails")
}

model Activity {
  id          String       @id @default(uuid())
  userId      String
  contactId   String
  type        ActivityType
  description String       @db.Text
  occurredAt  DateTime     @default(now())
  metadata    Json?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([userId, occurredAt])
  @@map("activities")
}

model Reminder {
  id          String    @id @default(uuid())
  userId      String
  contactId   String
  title       String
  dueDate     DateTime
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate, completed])
  @@map("reminders")
}

model EmailTemplate {
  id         String   @id @default(uuid())
  userId     String
  name       String // User-friendly template name
  subject    String
  body       String   @db.Text
  bodyHtml   String?  @db.Text
  isDefault  Boolean  @default(false) // User's default template
  category   String? // e.g., "follow-up", "introduction", "thank-you"
  usageCount Int      @default(0) // Track template popularity
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
  @@map("email_templates")
}

model ConversationHistory {
  id        String    @id @default(uuid())
  userId    String
  contactId String
  emailId   String? // Reference to emails table
  content   String    @db.Text // Concatenated subject + body for AI context
  direction Direction // SENT or RECEIVED
  timestamp DateTime  @default(now())
  metadata  Json? // Store email metadata (opened, clicked, etc.)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  email   Email?  @relation(fields: [emailId], references: [id], onDelete: SetNull)

  @@index([userId, contactId]) // Composite index for efficient context retrieval
  @@index([timestamp])
  @@map("conversation_history")
}
