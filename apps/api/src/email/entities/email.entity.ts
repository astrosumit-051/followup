import { ObjectType, Field, ID, Int, HideField, registerEnumType } from '@nestjs/graphql';
import { EmailStatus, TemplateType } from '../enums';

// Register enums for GraphQL schema generation
registerEnumType(EmailStatus, {
  name: 'EmailStatus',
  description: 'Current state of an email (DRAFT, SCHEDULED, SENT, FAILED, CANCELLED)',
});

registerEnumType(TemplateType, {
  name: 'TemplateType',
  description: 'Style/source of email template (FORMAL, CASUAL, CUSTOM, AI_GENERATED, TEMPLATE_BASED)',
});

/**
 * Email Entity
 *
 * Represents an email in the system - either a draft, scheduled, or sent email.
 * Generated by AI or manually created by the user.
 *
 * @example
 * ```graphql
 * query GetEmail {
 *   email(id: "email-id") {
 *     id
 *     subject
 *     body
 *     status
 *     providerId
 *     tokensUsed
 *   }
 * }
 * ```
 */
@ObjectType({ description: 'An email generated by AI or manually created by the user. Can be a draft, scheduled, or sent email.' })
export class Email {
  @Field(() => ID, { description: 'Unique identifier for this email' })
  id!: string;

  @HideField()
  userId!: string;

  @Field({ description: 'ID of the contact this email is addressed to' })
  contactId!: string;

  @Field({ description: 'Email subject line (5-200 characters)' })
  subject!: string;

  @Field({ description: 'Plain text email body (50-2000 characters)' })
  body!: string;

  @Field(() => String, { nullable: true, description: 'HTML-formatted email body (optional)' })
  bodyHtml?: string | null;

  @Field(() => EmailStatus, { description: 'Current state of the email (DRAFT, SENT, SCHEDULED, FAILED, CANCELLED)' })
  status!: EmailStatus;

  @Field(() => TemplateType, { nullable: true, description: 'Style variant used (FORMAL, CASUAL, CUSTOM, AI_GENERATED, TEMPLATE_BASED)' })
  templateType?: TemplateType | null;

  @Field(() => String, { nullable: true, description: 'LLM provider that generated this email (gemini, openai, anthropic)' })
  providerId?: string | null;

  @Field(() => Int, { nullable: true, description: 'Number of tokens used during AI generation (for cost tracking)' })
  tokensUsed?: number | null;

  @Field(() => Date, { nullable: true, description: 'Timestamp when email was generated by AI' })
  generatedAt?: Date | null;

  @Field(() => Date, { nullable: true, description: 'Timestamp when email was sent to recipient' })
  sentAt?: Date | null;

  @Field(() => Date, { nullable: true, description: 'Timestamp when recipient opened the email (via tracking pixel)' })
  openedAt?: Date | null;

  @Field(() => Date, { nullable: true, description: 'Timestamp when recipient replied to the email' })
  repliedAt?: Date | null;

  @Field(() => Date, { description: 'Timestamp when email record was created' })
  createdAt!: Date;

  @Field(() => Date, { description: 'Timestamp when email record was last modified' })
  updatedAt!: Date;
}
